import {
  __commonJS
} from "./chunk-BUSYA2B4.js";

// node_modules/fast-simplex-noise/lib/2d.js
var require_d = __commonJS({
  "node_modules/fast-simplex-noise/lib/2d.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.makeNoise2D = void 0;
    var G2 = (3 - Math.sqrt(3)) / 6;
    var Grad = [
      [1, 1],
      [-1, 1],
      [1, -1],
      [-1, -1],
      [1, 0],
      [-1, 0],
      [1, 0],
      [-1, 0],
      [0, 1],
      [0, -1],
      [0, 1],
      [0, -1]
    ];
    function makeNoise2D(random) {
      if (random === void 0) {
        random = Math.random;
      }
      var p = new Uint8Array(256);
      for (var i = 0; i < 256; i++)
        p[i] = i;
      var n;
      var q;
      for (var i = 255; i > 0; i--) {
        n = Math.floor((i + 1) * random());
        q = p[i];
        p[i] = p[n];
        p[n] = q;
      }
      var perm = new Uint8Array(512);
      var permMod12 = new Uint8Array(512);
      for (var i = 0; i < 512; i++) {
        perm[i] = p[i & 255];
        permMod12[i] = perm[i] % 12;
      }
      return function(x, y) {
        var s = (x + y) * 0.5 * (Math.sqrt(3) - 1);
        var i2 = Math.floor(x + s);
        var j = Math.floor(y + s);
        var t = (i2 + j) * G2;
        var X0 = i2 - t;
        var Y0 = j - t;
        var x0 = x - X0;
        var y0 = y - Y0;
        var i1 = x0 > y0 ? 1 : 0;
        var j1 = x0 > y0 ? 0 : 1;
        var x1 = x0 - i1 + G2;
        var y1 = y0 - j1 + G2;
        var x2 = x0 - 1 + 2 * G2;
        var y2 = y0 - 1 + 2 * G2;
        var ii = i2 & 255;
        var jj = j & 255;
        var g0 = Grad[permMod12[ii + perm[jj]]];
        var g1 = Grad[permMod12[ii + i1 + perm[jj + j1]]];
        var g2 = Grad[permMod12[ii + 1 + perm[jj + 1]]];
        var t0 = 0.5 - x0 * x0 - y0 * y0;
        var n0 = t0 < 0 ? 0 : Math.pow(t0, 4) * (g0[0] * x0 + g0[1] * y0);
        var t1 = 0.5 - x1 * x1 - y1 * y1;
        var n1 = t1 < 0 ? 0 : Math.pow(t1, 4) * (g1[0] * x1 + g1[1] * y1);
        var t2 = 0.5 - x2 * x2 - y2 * y2;
        var n2 = t2 < 0 ? 0 : Math.pow(t2, 4) * (g2[0] * x2 + g2[1] * y2);
        return 70.14805770653952 * (n0 + n1 + n2);
      };
    }
    exports.makeNoise2D = makeNoise2D;
  }
});

// node_modules/fast-simplex-noise/lib/3d.js
var require_d2 = __commonJS({
  "node_modules/fast-simplex-noise/lib/3d.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.makeNoise3D = void 0;
    var G3 = 1 / 6;
    var Grad = [
      [1, 1, 0],
      [-1, 1, 0],
      [1, -1, 0],
      [-1, -1, 0],
      [1, 0, 1],
      [-1, 0, 1],
      [1, 0, -1],
      [-1, 0, -1],
      [0, 1, 1],
      [0, -1, -1],
      [0, 1, -1],
      [0, -1, -1]
    ];
    function makeNoise3D(random) {
      if (random === void 0) {
        random = Math.random;
      }
      var p = new Uint8Array(256);
      for (var i = 0; i < 256; i++)
        p[i] = i;
      var n;
      var q;
      for (var i = 255; i > 0; i--) {
        n = Math.floor((i + 1) * random());
        q = p[i];
        p[i] = p[n];
        p[n] = q;
      }
      var perm = new Uint8Array(512);
      var permMod12 = new Uint8Array(512);
      for (var i = 0; i < 512; i++) {
        perm[i] = p[i & 255];
        permMod12[i] = perm[i] % 12;
      }
      return function(x, y, z) {
        var s = (x + y + z) / 3;
        var i2 = Math.floor(x + s);
        var j = Math.floor(y + s);
        var k = Math.floor(z + s);
        var t = (i2 + j + k) * G3;
        var X0 = i2 - t;
        var Y0 = j - t;
        var Z0 = k - t;
        var x0 = x - X0;
        var y0 = y - Y0;
        var z0 = z - Z0;
        var i1, j1, k1;
        var i22, j2, k2;
        if (x0 >= y0) {
          if (y0 >= z0) {
            i1 = i22 = j2 = 1;
            j1 = k1 = k2 = 0;
          } else if (x0 >= z0) {
            i1 = i22 = k2 = 1;
            j1 = k1 = j2 = 0;
          } else {
            k1 = i22 = k2 = 1;
            i1 = j1 = j2 = 0;
          }
        } else {
          if (y0 < z0) {
            k1 = j2 = k2 = 1;
            i1 = j1 = i22 = 0;
          } else if (x0 < z0) {
            j1 = j2 = k2 = 1;
            i1 = k1 = i22 = 0;
          } else {
            j1 = i22 = j2 = 1;
            i1 = k1 = k2 = 0;
          }
        }
        var x1 = x0 - i1 + G3;
        var y1 = y0 - j1 + G3;
        var z1 = z0 - k1 + G3;
        var x2 = x0 - i22 + 2 * G3;
        var y2 = y0 - j2 + 2 * G3;
        var z2 = z0 - k2 + 2 * G3;
        var x3 = x0 - 1 + 3 * G3;
        var y3 = y0 - 1 + 3 * G3;
        var z3 = z0 - 1 + 3 * G3;
        var ii = i2 & 255;
        var jj = j & 255;
        var kk = k & 255;
        var g0 = Grad[permMod12[ii + perm[jj + perm[kk]]]];
        var g1 = Grad[permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]]];
        var g2 = Grad[permMod12[ii + i22 + perm[jj + j2 + perm[kk + k2]]]];
        var g3 = Grad[permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]]];
        var t0 = 0.5 - x0 * x0 - y0 * y0 - z0 * z0;
        var n0 = t0 < 0 ? 0 : Math.pow(t0, 4) * (g0[0] * x0 + g0[1] * y0 + g0[2] * z0);
        var t1 = 0.5 - x1 * x1 - y1 * y1 - z1 * z1;
        var n1 = t1 < 0 ? 0 : Math.pow(t1, 4) * (g1[0] * x1 + g1[1] * y1 + g1[2] * z1);
        var t2 = 0.5 - x2 * x2 - y2 * y2 - z2 * z2;
        var n2 = t2 < 0 ? 0 : Math.pow(t2, 4) * (g2[0] * x2 + g2[1] * y2 + g2[2] * z2);
        var t3 = 0.5 - x3 * x3 - y3 * y3 - z3 * z3;
        var n3 = t3 < 0 ? 0 : Math.pow(t3, 4) * (g3[0] * x3 + g3[1] * y3 + g3[2] * z3);
        return 94.68493150681972 * (n0 + n1 + n2 + n3);
      };
    }
    exports.makeNoise3D = makeNoise3D;
  }
});

// node_modules/fast-simplex-noise/lib/4d.js
var require_d3 = __commonJS({
  "node_modules/fast-simplex-noise/lib/4d.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.makeNoise4D = void 0;
    var G4 = (5 - Math.sqrt(5)) / 20;
    var Grad = [
      [0, 1, 1, 1],
      [0, 1, 1, -1],
      [0, 1, -1, 1],
      [0, 1, -1, -1],
      [0, -1, 1, 1],
      [0, -1, 1, -1],
      [0, -1, -1, 1],
      [0, -1, -1, -1],
      [1, 0, 1, 1],
      [1, 0, 1, -1],
      [1, 0, -1, 1],
      [1, 0, -1, -1],
      [-1, 0, 1, 1],
      [-1, 0, 1, -1],
      [-1, 0, -1, 1],
      [-1, 0, -1, -1],
      [1, 1, 0, 1],
      [1, 1, 0, -1],
      [1, -1, 0, 1],
      [1, -1, 0, -1],
      [-1, 1, 0, 1],
      [-1, 1, 0, -1],
      [-1, -1, 0, 1],
      [-1, -1, 0, -1],
      [1, 1, 1, 0],
      [1, 1, -1, 0],
      [1, -1, 1, 0],
      [1, -1, -1, 0],
      [-1, 1, 1, 0],
      [-1, 1, -1, 0],
      [-1, -1, 1, 0],
      [-1, -1, -1, 0]
    ];
    function makeNoise4D(random) {
      if (random === void 0) {
        random = Math.random;
      }
      var p = new Uint8Array(256);
      for (var i = 0; i < 256; i++)
        p[i] = i;
      var n;
      var q;
      for (var i = 255; i > 0; i--) {
        n = Math.floor((i + 1) * random());
        q = p[i];
        p[i] = p[n];
        p[n] = q;
      }
      var perm = new Uint8Array(512);
      var permMod12 = new Uint8Array(512);
      for (var i = 0; i < 512; i++) {
        perm[i] = p[i & 255];
        permMod12[i] = perm[i] % 12;
      }
      return function(x, y, z, w) {
        var s = (x + y + z + w) * (Math.sqrt(5) - 1) / 4;
        var i2 = Math.floor(x + s);
        var j = Math.floor(y + s);
        var k = Math.floor(z + s);
        var l = Math.floor(w + s);
        var t = (i2 + j + k + l) * G4;
        var X0 = i2 - t;
        var Y0 = j - t;
        var Z0 = k - t;
        var W0 = l - t;
        var x0 = x - X0;
        var y0 = y - Y0;
        var z0 = z - Z0;
        var w0 = w - W0;
        var rankx = 0;
        var ranky = 0;
        var rankz = 0;
        var rankw = 0;
        if (x0 > y0)
          rankx++;
        else
          ranky++;
        if (x0 > z0)
          rankx++;
        else
          rankz++;
        if (x0 > w0)
          rankx++;
        else
          rankw++;
        if (y0 > z0)
          ranky++;
        else
          rankz++;
        if (y0 > w0)
          ranky++;
        else
          rankw++;
        if (z0 > w0)
          rankz++;
        else
          rankw++;
        var i1 = rankx >= 3 ? 1 : 0;
        var j1 = ranky >= 3 ? 1 : 0;
        var k1 = rankz >= 3 ? 1 : 0;
        var l1 = rankw >= 3 ? 1 : 0;
        var i22 = rankx >= 2 ? 1 : 0;
        var j2 = ranky >= 2 ? 1 : 0;
        var k2 = rankz >= 2 ? 1 : 0;
        var l2 = rankw >= 2 ? 1 : 0;
        var i3 = rankx >= 1 ? 1 : 0;
        var j3 = ranky >= 1 ? 1 : 0;
        var k3 = rankz >= 1 ? 1 : 0;
        var l3 = rankw >= 1 ? 1 : 0;
        var x1 = x0 - i1 + G4;
        var y1 = y0 - j1 + G4;
        var z1 = z0 - k1 + G4;
        var w1 = w0 - l1 + G4;
        var x2 = x0 - i22 + 2 * G4;
        var y2 = y0 - j2 + 2 * G4;
        var z2 = z0 - k2 + 2 * G4;
        var w2 = w0 - l2 + 2 * G4;
        var x3 = x0 - i3 + 3 * G4;
        var y3 = y0 - j3 + 3 * G4;
        var z3 = z0 - k3 + 3 * G4;
        var w3 = w0 - l3 + 3 * G4;
        var x4 = x0 - 1 + 4 * G4;
        var y4 = y0 - 1 + 4 * G4;
        var z4 = z0 - 1 + 4 * G4;
        var w4 = w0 - 1 + 4 * G4;
        var ii = i2 & 255;
        var jj = j & 255;
        var kk = k & 255;
        var ll = l & 255;
        var g0 = Grad[perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32];
        var g1 = Grad[perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32];
        var g2 = Grad[perm[ii + i22 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32];
        var g3 = Grad[perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32];
        var g4 = Grad[perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32];
        var t0 = 0.5 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;
        var n0 = t0 < 0 ? 0 : Math.pow(t0, 4) * (g0[0] * x0 + g0[1] * y0 + g0[2] * z0 + g0[3] * w0);
        var t1 = 0.5 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;
        var n1 = t1 < 0 ? 0 : Math.pow(t1, 4) * (g1[0] * x1 + g1[1] * y1 + g1[2] * z1 + g1[3] * w1);
        var t2 = 0.5 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;
        var n2 = t2 < 0 ? 0 : Math.pow(t2, 4) * (g2[0] * x2 + g2[1] * y2 + g2[2] * z2 + g2[3] * w2);
        var t3 = 0.5 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;
        var n3 = t3 < 0 ? 0 : Math.pow(t3, 4) * (g3[0] * x3 + g3[1] * y3 + g3[2] * z3 + g3[3] * w3);
        var t4 = 0.5 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;
        var n4 = t4 < 0 ? 0 : Math.pow(t4, 4) * (g4[0] * x4 + g4[1] * y4 + g4[2] * z4 + g4[3] * w4);
        return 72.37855765153665 * (n0 + n1 + n2 + n3 + n4);
      };
    }
    exports.makeNoise4D = makeNoise4D;
  }
});

// node_modules/fast-simplex-noise/lib/mod.js
var require_mod = __commonJS({
  "node_modules/fast-simplex-noise/lib/mod.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.makeNoise4D = exports.makeNoise3D = exports.makeNoise2D = void 0;
    var _2d_1 = require_d();
    Object.defineProperty(exports, "makeNoise2D", { enumerable: true, get: function() {
      return _2d_1.makeNoise2D;
    } });
    var _3d_1 = require_d2();
    Object.defineProperty(exports, "makeNoise3D", { enumerable: true, get: function() {
      return _3d_1.makeNoise3D;
    } });
    var _4d_1 = require_d3();
    Object.defineProperty(exports, "makeNoise4D", { enumerable: true, get: function() {
      return _4d_1.makeNoise4D;
    } });
  }
});
export default require_mod();
//# sourceMappingURL=fast-simplex-noise.js.map
